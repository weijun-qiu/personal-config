;;; highball-mode.el --- Major mode for the Highball language.

;;; Commentary:

;; Major mode for the Highball language.

;;; Code:

(defvar highball-mode-hook nil)

(defvar highball-mode-map
  (let ((map (make-keymap)))
    map)
  "Keymap for Highball major mode.")

(add-to-list 'auto-mode-alist '("\\.hb\\'" . highball-mode))

;; Generated by (regexp-opt '("var" "def" "class" "if" "else" "for" "while" "continue" "break" "return" "int" "int32" "uint" "uint8" "uint32" "float" "float32"))
(defun highball-reserved-keywords ()
  '("def" "class" "if" "else" "for" "while" "continue" "break" "return"))

(defun highball-type-keywords ()
  '("var" "int" "int32" "uint" "uint8" "uint32" "float" "float32"))

(defun highball-constant-keywords ()
  '("true" "false"))

(defvar highball-font-lock-keywords
  (list
   `(,(regexp-opt (highball-reserved-keywords) 'symbols) . font-lock-keyword-face)
   `(,(regexp-opt (highball-type-keywords) 'symbols) . font-lock-type-face)
   `(,(regexp-opt (highball-constant-keywords) 'symbols) . font-lock-constant-face)
   (cons (concat (regexp-opt (highball-type-keywords)) " \\(\\sw+\\) *(") '(1 font-lock-function-name-face))
   (cons (concat (regexp-opt (highball-type-keywords)) " \\(\\sw+\\)") '(1 font-lock-variable-name-face)))
  "Syntax highlighting for Highball keywords.")

(defvar highball-default-tab-width 4)

(defun highball-indent-line ()
  "Indent current line as Highball code."
  (interactive)
  (if (bobp)
      (indent-line-to 0)
    (let ((not-indented t) cur-indent)
      (progn
	(save-excursion
	  (move-beginning-of-line 1)
	  (if (looking-at "[[:blank:]]*}.*$")
	      (while not-indented
		(forward-line -1)
		(if (looking-at "[[:blank:]]*$") nil
		    (progn
		      (setq cur-indent (max (- (current-indentation) highball-default-tab-width) 0))
		      (setq not-indented nil))
		  (if (bobp)
		      (setq not-indented nil))))
	    (while not-indented
	      (forward-line -1)
	      (if (looking-at ".*{[[:blank:]]*$")
		  (progn
		    (setq cur-indent (+ (current-indentation) highball-default-tab-width))
		    (setq not-indented nil))
		(if (looking-at "[[:blank:]]*}.*$")
		    (progn
		      (setq cur-indent (current-indentation))
		      (setq not-indented nil))
		  (if (bobp)
		      (setq not-indented nil)))))))
	(if cur-indent
	    (indent-line-to cur-indent)
	  (indent-line-to 0))))))

(defvar highball-mode-syntax-table
  (let ((st (make-syntax-table)))
    (modify-syntax-entry ?_ "w" st)
    (modify-syntax-entry ?# "<" st)
    (modify-syntax-entry ?\n ">" st)
    st)
  "Syntax table for Highball mode.")

(defun highball-mode ()
  "Major mode for the Highball language."
  (interactive)
  (kill-all-local-variables)
  (set-syntax-table highball-mode-syntax-table)
  (use-local-map highball-mode-map)
  (set (make-local-variable 'font-lock-defaults) '(highball-font-lock-keywords))
  (set (make-local-variable 'indent-line-function) 'highball-indent-line)
  (setq major-mode 'highball-mode)
  (setq mode-name "Highball")
  (run-hooks 'highball-mode-hook))
  

(provide 'highball-mode)

;;; highball-mode.el ends here
